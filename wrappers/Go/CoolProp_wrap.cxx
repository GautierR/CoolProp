/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../../src/CoolProp.i

#define SWIGMODULE CoolProp

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< double > >::const_reference std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< std::vector< double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< std::string > >::const_reference std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__get(std::vector< std::vector< std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__set(std::vector< std::vector< std::string > > *self,int i,std::vector< std::vector< std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "DataStructures.h"
#include "AbstractState.h"
#include "CoolProp.h"
#include "PhaseEnvelope.h"
#define SWIG
#include "Configuration.h"
#undef SWIG
#include "HumidAirProp.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_CoolProp_ef03193b832d75f0(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_0_CoolProp_ef03193b832d75f0() {
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_1_CoolProp_ef03193b832d75f0(long long _swig_go_0) {
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


std::vector< double > *_wrap_new_DoubleVector__SWIG_2_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


long long _wrap_DoubleVector_size_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_DoubleVector_capacity_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = ((std::vector< double > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_reserve_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0, long long _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_DoubleVector_isEmpty_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  result = (bool)((std::vector< double > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_clear_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_DoubleVector_add_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0, double _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (std::vector< double >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
}


double _wrap_DoubleVector_get_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0, intgo _swig_go_1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  double _swig_go_result;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (double)*result; 
  return _swig_go_result;
}


void _wrap_DoubleVector_set_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0, intgo _swig_go_1, double _swig_go_2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< double >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_DoubleVector_CoolProp_ef03193b832d75f0(std::vector< double > *_swig_go_0) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = *(std::vector< double > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


std::vector< std::vector< double > > *_wrap_new_VectorOfDoubleVector__SWIG_0_CoolProp_ef03193b832d75f0() {
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< double > > *_wrap_new_VectorOfDoubleVector__SWIG_1_CoolProp_ef03193b832d75f0(long long _swig_go_0) {
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< double > > *_wrap_new_VectorOfDoubleVector__SWIG_2_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorOfDoubleVector_size_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorOfDoubleVector_capacity_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfDoubleVector_reserve_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorOfDoubleVector_isEmpty_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfDoubleVector_clear_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorOfDoubleVector_add_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0, std::vector< double > *_swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  
}


std::vector< double > *_wrap_VectorOfDoubleVector_get_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< double > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfDoubleVector_set_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0, intgo _swig_go_1, std::vector< double > *_swig_go_2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< double > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorOfDoubleVector_CoolProp_ef03193b832d75f0(std::vector< std::vector< double > > *_swig_go_0) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< double > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_0_CoolProp_ef03193b832d75f0() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_1_CoolProp_ef03193b832d75f0(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_2_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_StringVector_size_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_StringVector_capacity_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_reserve_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_StringVector_isEmpty_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_clear_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_StringVector_add_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_StringVector_get_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_StringVector_set_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_StringVector_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


std::vector< std::vector< std::string > > *_wrap_new_VectorOfStringVector__SWIG_0_CoolProp_ef03193b832d75f0() {
  std::vector< std::vector< std::string > > *result = 0 ;
  std::vector< std::vector< std::string > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >();
  *(std::vector< std::vector< std::string > > **)&_swig_go_result = (std::vector< std::vector< std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< std::string > > *_wrap_new_VectorOfStringVector__SWIG_1_CoolProp_ef03193b832d75f0(long long _swig_go_0) {
  std::vector< std::vector< std::string > >::size_type arg1 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  std::vector< std::vector< std::string > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1);
  *(std::vector< std::vector< std::string > > **)&_swig_go_result = (std::vector< std::vector< std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< std::string > > *_wrap_new_VectorOfStringVector__SWIG_2_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  std::vector< std::vector< std::string > > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >((std::vector< std::vector< std::string > > const &)*arg1);
  *(std::vector< std::vector< std::string > > **)&_swig_go_result = (std::vector< std::vector< std::string > > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorOfStringVector_size_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< std::string > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorOfStringVector_capacity_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< std::string > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfStringVector_reserve_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_VectorOfStringVector_isEmpty_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< std::string > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfStringVector_clear_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_VectorOfStringVector_add_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< std::string > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< std::string > >::value_type const &)*arg2);
  
}


std::vector< std::string > *_wrap_VectorOfStringVector_get_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< std::string > >::value_type *) &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< std::vector< std::string > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorOfStringVector_set_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0, intgo _swig_go_1, std::vector< std::string > *_swig_go_2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< std::string > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__set(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_VectorOfStringVector_CoolProp_ef03193b832d75f0(std::vector< std::vector< std::string > > *_swig_go_0) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_SimpleState_rhomolar_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar = arg2;
  
}


double _wrap_SimpleState_rhomolar_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->rhomolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_T_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->T = arg2;
  
}


double _wrap_SimpleState_T_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->T);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_p_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->p = arg2;
  
}


double _wrap_SimpleState_p_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->p);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_hmolar_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->hmolar = arg2;
  
}


double _wrap_SimpleState_hmolar_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->hmolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_smolar_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->smolar = arg2;
  
}


double _wrap_SimpleState_smolar_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->smolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_umolar_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->umolar = arg2;
  
}


double _wrap_SimpleState_umolar_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->umolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SimpleState_Q_set_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->Q = arg2;
  
}


double _wrap_SimpleState_Q_get_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  result = (double) ((arg1)->Q);
  _swig_go_result = result; 
  return _swig_go_result;
}


CoolProp::SimpleState *_wrap_new_SimpleState_CoolProp_ef03193b832d75f0() {
  CoolProp::SimpleState *result = 0 ;
  CoolProp::SimpleState *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::SimpleState *)new CoolProp::SimpleState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SimpleState **)&_swig_go_result = (CoolProp::SimpleState *)result; 
  return _swig_go_result;
}


void _wrap_SimpleState_fill_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    try {
      (arg1)->fill(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


bool _wrap_SimpleState_is_valid_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->is_valid();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_SimpleState_CoolProp_ef03193b832d75f0(CoolProp::SimpleState *_swig_go_0) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  
  arg1 = *(CoolProp::SimpleState **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_CriticalState_stable_set_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, bool _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->stable = arg2;
  
}


bool _wrap_CriticalState_stable_get_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  result = (bool) ((arg1)->stable);
  _swig_go_result = result; 
  return _swig_go_result;
}


CoolProp::CriticalState *_wrap_new_CriticalState_CoolProp_ef03193b832d75f0() {
  CoolProp::CriticalState *result = 0 ;
  CoolProp::CriticalState *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::CriticalState *)new CoolProp::CriticalState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::CriticalState **)&_swig_go_result = (CoolProp::CriticalState *)result; 
  return _swig_go_result;
}


void _wrap_delete_CriticalState_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_SetCriticalState_Rhomolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->rhomolar = arg2;
  
}


double _wrap_GetCriticalState_Rhomolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->rhomolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_T_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->T = arg2;
  
}


double _wrap_GetCriticalState_T_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->T);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_P_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->p = arg2;
  
}


double _wrap_GetCriticalState_P_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->p);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_Hmolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->hmolar = arg2;
  
}


double _wrap_GetCriticalState_Hmolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->hmolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_Smolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->smolar = arg2;
  
}


double _wrap_GetCriticalState_Smolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->smolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_Umolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->umolar = arg2;
  
}


double _wrap_GetCriticalState_Umolar_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->umolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetCriticalState_Q_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->Q = arg2;
  
}


double _wrap_GetCriticalState_Q_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->Q);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_CriticalState_fill_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0, double _swig_go_1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  (swig_b0)->fill(arg2);
  
}


bool _wrap_CriticalState_is_valid_CoolProp_ef03193b832d75f0(CoolProp::CriticalState *_swig_go_0) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::CriticalState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (bool)(swig_b0)->is_valid();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_SSAT_MAX_NOT_SET_SsatSimpleState_CoolProp_ef03193b832d75f0() {
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SsatSimpleState::SSAT_MAX_NOT_SET;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SSAT_MAX_DOESNT_EXIST_SsatSimpleState_CoolProp_ef03193b832d75f0() {
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SsatSimpleState::SSAT_MAX_DOESNT_EXIST;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SSAT_MAX_DOES_EXIST_SsatSimpleState_CoolProp_ef03193b832d75f0() {
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SsatSimpleState::SSAT_MAX_DOES_EXIST;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_SsatSimpleState_exists_set_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (CoolProp::SsatSimpleState::SsatSimpleStateEnum)_swig_go_1; 
  
  if (arg1) (arg1)->exists = arg2;
  
}


intgo _wrap_SsatSimpleState_exists_get_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  intgo _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  result = (CoolProp::SsatSimpleState::SsatSimpleStateEnum) ((arg1)->exists);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


CoolProp::SsatSimpleState *_wrap_new_SsatSimpleState_CoolProp_ef03193b832d75f0() {
  CoolProp::SsatSimpleState *result = 0 ;
  CoolProp::SsatSimpleState *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::SsatSimpleState *)new CoolProp::SsatSimpleState();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SsatSimpleState **)&_swig_go_result = (CoolProp::SsatSimpleState *)result; 
  return _swig_go_result;
}


void _wrap_delete_SsatSimpleState_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_SetSsatSimpleState_Rhomolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->rhomolar = arg2;
  
}


double _wrap_GetSsatSimpleState_Rhomolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->rhomolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_T_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->T = arg2;
  
}


double _wrap_GetSsatSimpleState_T_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->T);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_P_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->p = arg2;
  
}


double _wrap_GetSsatSimpleState_P_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->p);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_Hmolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->hmolar = arg2;
  
}


double _wrap_GetSsatSimpleState_Hmolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->hmolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_Smolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->smolar = arg2;
  
}


double _wrap_GetSsatSimpleState_Smolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->smolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_Umolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->umolar = arg2;
  
}


double _wrap_GetSsatSimpleState_Umolar_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->umolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetSsatSimpleState_Q_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  if (swig_b0) (swig_b0)->Q = arg2;
  
}


double _wrap_GetSsatSimpleState_Q_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (double) ((swig_b0)->Q);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SsatSimpleState_fill_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0, double _swig_go_1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  (swig_b0)->fill(arg2);
  
}


bool _wrap_SsatSimpleState_is_valid_CoolProp_ef03193b832d75f0(CoolProp::SsatSimpleState *_swig_go_0) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::SsatSimpleState **)&_swig_go_0; 
  
  CoolProp::SimpleState *swig_b0 = (CoolProp::SimpleState *)arg1;
  result = (bool)(swig_b0)->is_valid();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_INVALID_PARAMETER_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INVALID_PARAMETER;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_igas_constant_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::igas_constant;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_imolar_mass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::imolar_mass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iacentric_factor_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iacentric_factor;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_irhomolar_reducing_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::irhomolar_reducing;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_irhomolar_critical_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::irhomolar_critical;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_reducing_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_reducing;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_critical_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_critical;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_irhomass_reducing_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::irhomass_reducing;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_irhomass_critical_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::irhomass_critical;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_critical_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP_critical;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_reducing_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP_reducing;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_triple_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_triple;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_triple_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP_triple;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_min_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_min;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_max_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_max;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_max_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP_max;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_min_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP_min;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idipole_moment_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idipole_moment;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iP_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iP;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iQ_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iQ;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iTau_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iTau;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iDelta_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iDelta;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iDmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iDmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iHmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iHmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iSmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iSmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCpmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCpmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCp0molar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCp0molar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCvmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCvmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iUmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iUmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iGmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iGmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iHelmholtzmolar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iHelmholtzmolar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iSmolar_residual_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iSmolar_residual;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iDmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iDmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iHmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iHmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iSmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iSmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCpmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCpmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCp0mass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCp0mass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCvmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCvmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iUmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iUmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iGmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iGmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iHelmholtzmass_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iHelmholtzmass;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iviscosity_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iviscosity;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iconductivity_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iconductivity;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_isurface_tension_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::isurface_tension;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iPrandtl_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iPrandtl;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ispeed_sound_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ispeed_sound;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iisothermal_compressibility_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iisothermal_compressibility;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iisobaric_expansion_coefficient_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iisobaric_expansion_coefficient;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iisentropic_expansion_coefficient_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iisentropic_expansion_coefficient;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ifundamental_derivative_of_gas_dynamics_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ifundamental_derivative_of_gas_dynamics;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ialphar_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ialphar;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idalphar_dtau_constdelta_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idalphar_dtau_constdelta;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idalphar_ddelta_consttau_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idalphar_ddelta_consttau;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ialpha0_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ialpha0;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idalpha0_dtau_constdelta_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idalpha0_dtau_constdelta;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idalpha0_ddelta_consttau_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idalpha0_ddelta_consttau;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iBvirial_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iBvirial;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iCvirial_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iCvirial;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idBvirial_dT_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idBvirial_dT;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_idCvirial_dT_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::idCvirial_dT;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iZ_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iZ;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iPIP_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iPIP;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ifraction_min_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ifraction_min;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ifraction_max_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::ifraction_max;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iT_freeze_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iT_freeze;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iGWP20_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iGWP20;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iGWP100_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iGWP100;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iGWP500_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iGWP500;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iFH_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iFH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iHH_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iHH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iPH_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iPH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iODP_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iODP;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iPhase_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iPhase;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iundefined_parameter_CoolProp_ef03193b832d75f0() {
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iundefined_parameter;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_liquid_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_liquid;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_supercritical_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_supercritical;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_supercritical_gas_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_supercritical_gas;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_supercritical_liquid_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_supercritical_liquid;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_critical_point_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_critical_point;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_gas_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_gas;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_twophase_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_twophase;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_unknown_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_unknown;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_iphase_not_imposed_CoolProp_ef03193b832d75f0() {
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::iphase_not_imposed;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_get_parameter_information_CoolProp_ef03193b832d75f0(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = CoolProp::get_parameter_information(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_get_parameter_index_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  CoolProp::parameters result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (CoolProp::parameters)CoolProp::get_parameter_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_is_valid_phase_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::phases *_swig_go_1) {
  std::string *arg1 = 0 ;
  CoolProp::phases *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(CoolProp::phases **)&_swig_go_1; 
  
  {
    try {
      result = (bool)CoolProp::is_valid_phase((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_get_phase_index_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  CoolProp::phases result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (CoolProp::phases)CoolProp::get_phase_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_is_trivial_parameter_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = (bool)CoolProp::is_trivial_parameter(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_is_valid_parameter_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::parameters *_swig_go_1) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(CoolProp::parameters **)&_swig_go_1; 
  
  {
    try {
      result = (bool)CoolProp::is_valid_parameter((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_is_valid_first_derivative_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::parameters *_swig_go_1, CoolProp::parameters *_swig_go_2, CoolProp::parameters *_swig_go_3) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(CoolProp::parameters **)&_swig_go_1; 
  arg3 = *(CoolProp::parameters **)&_swig_go_2; 
  arg4 = *(CoolProp::parameters **)&_swig_go_3; 
  
  {
    try {
      result = (bool)CoolProp::is_valid_first_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_is_valid_first_saturation_derivative_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::parameters *_swig_go_1, CoolProp::parameters *_swig_go_2) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(CoolProp::parameters **)&_swig_go_1; 
  arg3 = *(CoolProp::parameters **)&_swig_go_2; 
  
  {
    try {
      result = (bool)CoolProp::is_valid_first_saturation_derivative((std::string const &)*arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_is_valid_second_derivative_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::parameters *_swig_go_1, CoolProp::parameters *_swig_go_2, CoolProp::parameters *_swig_go_3, CoolProp::parameters *_swig_go_4, CoolProp::parameters *_swig_go_5) {
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  CoolProp::parameters *arg5 = 0 ;
  CoolProp::parameters *arg6 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(CoolProp::parameters **)&_swig_go_1; 
  arg3 = *(CoolProp::parameters **)&_swig_go_2; 
  arg4 = *(CoolProp::parameters **)&_swig_go_3; 
  arg5 = *(CoolProp::parameters **)&_swig_go_4; 
  arg6 = *(CoolProp::parameters **)&_swig_go_5; 
  
  {
    try {
      result = (bool)CoolProp::is_valid_second_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_get_csv_parameter_list_CoolProp_ef03193b832d75f0() {
  std::string result;
  _gostring_ _swig_go_result;
  
  
  {
    try {
      result = CoolProp::get_csv_parameter_list();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_IFRAC_MASS_CoolProp_ef03193b832d75f0() {
  CoolProp::composition_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IFRAC_MASS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IFRAC_MOLE_CoolProp_ef03193b832d75f0() {
  CoolProp::composition_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IFRAC_MOLE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IFRAC_VOLUME_CoolProp_ef03193b832d75f0() {
  CoolProp::composition_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IFRAC_VOLUME;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IFRAC_UNDEFINED_CoolProp_ef03193b832d75f0() {
  CoolProp::composition_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IFRAC_UNDEFINED;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IFRAC_PURE_CoolProp_ef03193b832d75f0() {
  CoolProp::composition_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IFRAC_PURE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_PURE_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_PURE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_PSEUDOPURE_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_PSEUDOPURE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_REFPROP_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_REFPROP;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_INCOMPRESSIBLE_LIQUID_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_INCOMPRESSIBLE_LIQUID;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_INCOMPRESSIBLE_SOLUTION_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_INCOMPRESSIBLE_SOLUTION;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLUID_TYPE_UNDEFINED_CoolProp_ef03193b832d75f0() {
  CoolProp::fluid_types result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::FLUID_TYPE_UNDEFINED;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INPUT_PAIR_INVALID_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INPUT_PAIR_INVALID;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_QT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::QT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PQ_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PQ_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_QSmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::QSmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_QSmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::QSmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmolarQ_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmolarQ_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmassQ_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmassQ_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarQ_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarQ_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassQ_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassQ_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmolarT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmolarT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmassT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmassT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SmolarT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SmolarT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SmassT_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SmassT_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TUmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TUmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TUmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TUmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassP_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassP_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarP_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarP_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmassP_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmassP_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmolarP_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmolarP_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PSmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PSmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PSmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PSmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PUmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PUmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PUmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PUmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmassSmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmassSmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HmolarSmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HmolarSmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SmassUmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SmassUmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SmolarUmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SmolarUmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassHmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassHmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarHmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarHmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassSmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassSmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarSmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarSmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmassUmass_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmassUmass_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DmolarUmolar_INPUTS_CoolProp_ef03193b832d75f0() {
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::DmolarUmolar_INPUTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_match_pair_CoolProp_ef03193b832d75f0(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool *_swig_go_4) {
  CoolProp::parameters arg1 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  bool *arg5 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (CoolProp::parameters)_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  arg5 = *(bool **)&_swig_go_4; 
  
  {
    try {
      result = (bool)CoolProp::match_pair(arg1,arg2,arg3,arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_get_input_pair_index_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  CoolProp::input_pairs result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (CoolProp::input_pairs)CoolProp::get_input_pair_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_get_input_pair_short_desc_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  CoolProp::input_pairs arg1 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (CoolProp::input_pairs)_swig_go_0; 
  
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_short_desc(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_get_input_pair_long_desc_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  CoolProp::input_pairs arg1 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (CoolProp::input_pairs)_swig_go_0; 
  
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_long_desc(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_split_input_pair_CoolProp_ef03193b832d75f0(intgo _swig_go_0, CoolProp::parameters *_swig_go_1, CoolProp::parameters *_swig_go_2) {
  CoolProp::input_pairs arg1 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  
  arg1 = (CoolProp::input_pairs)_swig_go_0; 
  arg2 = *(CoolProp::parameters **)&_swig_go_1; 
  arg3 = *(CoolProp::parameters **)&_swig_go_2; 
  
  {
    try {
      CoolProp::split_input_pair(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


_gostring_ _wrap_get_mixture_binary_pair_data_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = CoolProp::get_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_set_mixture_binary_pair_data_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, double _swig_go_3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (double)_swig_go_3; 
  
  {
    try {
      CoolProp::set_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


intgo _wrap_INVALID_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INVALID_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HEOS_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HEOS_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::REFPROP_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INCOMP_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INCOMP_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IF97_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IF97_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TREND_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TREND_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TTSE_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TTSE_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BICUBIC_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::BICUBIC_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SRK_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SRK_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PR_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PR_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_VTPR_BACKEND_FAMILY_CoolProp_ef03193b832d75f0() {
  CoolProp::backend_families result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::VTPR_BACKEND_FAMILY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INVALID_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INVALID_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HEOS_BACKEND_PURE_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HEOS_BACKEND_PURE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HEOS_BACKEND_MIX_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::HEOS_BACKEND_MIX;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_BACKEND_PURE_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::REFPROP_BACKEND_PURE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_BACKEND_MIX_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::REFPROP_BACKEND_MIX;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_INCOMP_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::INCOMP_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_IF97_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::IF97_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TREND_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TREND_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TTSE_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::TTSE_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BICUBIC_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::BICUBIC_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SRK_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::SRK_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PR_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::PR_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_VTPR_BACKEND_CoolProp_ef03193b832d75f0() {
  CoolProp::backends result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CoolProp::VTPR_BACKEND;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_extract_backend_families_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::backend_families *_swig_go_1, CoolProp::backend_families *_swig_go_2) {
  std::string arg1 ;
  CoolProp::backend_families *arg2 = 0 ;
  CoolProp::backend_families *arg3 = 0 ;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  arg2 = *(CoolProp::backend_families **)&_swig_go_1; 
  arg3 = *(CoolProp::backend_families **)&_swig_go_2; 
  
  {
    try {
      CoolProp::extract_backend_families(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_extract_backend_families_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, CoolProp::backend_families *_swig_go_1, std::string *_swig_go_2) {
  std::string arg1 ;
  CoolProp::backend_families *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  arg2 = *(CoolProp::backend_families **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  {
    try {
      CoolProp::extract_backend_families_string(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


_gostring_ _wrap_get_backend_string_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  CoolProp::backends arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (CoolProp::backends)_swig_go_0; 
  
  {
    try {
      result = CoolProp::get_backend_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_SpinodalData_tau_set_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->tau = *arg2;
  
}


std::vector< double > *_wrap_SpinodalData_tau_get_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->tau);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_SpinodalData_delta_set_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->delta = *arg2;
  
}


std::vector< double > *_wrap_SpinodalData_delta_get_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->delta);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_SpinodalData_M1_set_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->M1 = *arg2;
  
}


std::vector< double > *_wrap_SpinodalData_M1_get_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->M1);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


CoolProp::SpinodalData *_wrap_new_SpinodalData_CoolProp_ef03193b832d75f0() {
  CoolProp::SpinodalData *result = 0 ;
  CoolProp::SpinodalData *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::SpinodalData *)new CoolProp::SpinodalData();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SpinodalData **)&_swig_go_result = (CoolProp::SpinodalData *)result; 
  return _swig_go_result;
}


void _wrap_delete_SpinodalData_CoolProp_ef03193b832d75f0(CoolProp::SpinodalData *_swig_go_0) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  
  arg1 = *(CoolProp::SpinodalData **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_GuessesStructure_T_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->T = arg2;
  
}


double _wrap_GuessesStructure_T_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->T);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_p_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->p = arg2;
  
}


double _wrap_GuessesStructure_p_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->p);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_rhomolar_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar = arg2;
  
}


double _wrap_GuessesStructure_rhomolar_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->rhomolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_hmolar_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->hmolar = arg2;
  
}


double _wrap_GuessesStructure_hmolar_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->hmolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_smolar_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->smolar = arg2;
  
}


double _wrap_GuessesStructure_smolar_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->smolar);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_rhomolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar_liq = arg2;
  
}


double _wrap_GuessesStructure_rhomolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->rhomolar_liq);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_rhomolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, double _swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar_vap = arg2;
  
}


double _wrap_GuessesStructure_rhomolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (double) ((arg1)->rhomolar_vap);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_x_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->x = *arg2;
  
}


std::vector< double > *_wrap_GuessesStructure_x_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->x);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_y_set_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->y = *arg2;
  
}


std::vector< double > *_wrap_GuessesStructure_y_get_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->y);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


CoolProp::GuessesStructure *_wrap_new_GuessesStructure_CoolProp_ef03193b832d75f0() {
  CoolProp::GuessesStructure *result = 0 ;
  CoolProp::GuessesStructure *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::GuessesStructure *)new CoolProp::GuessesStructure();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::GuessesStructure **)&_swig_go_result = (CoolProp::GuessesStructure *)result; 
  return _swig_go_result;
}


void _wrap_GuessesStructure_clear_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_delete_GuessesStructure_CoolProp_ef03193b832d75f0(CoolProp::GuessesStructure *_swig_go_0) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  
  arg1 = *(CoolProp::GuessesStructure **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_delete_AbstractState_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


CoolProp::AbstractState *_wrap_AbstractState_factory__SWIG_0_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  CoolProp::AbstractState *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::AbstractState **)&_swig_go_result = (CoolProp::AbstractState *)result; 
  return _swig_go_result;
}


CoolProp::AbstractState *_wrap_AbstractState_factory__SWIG_1_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, std::vector< std::string > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  CoolProp::AbstractState *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::AbstractState **)&_swig_go_result = (CoolProp::AbstractState *)result; 
  return _swig_go_result;
}


void _wrap_AbstractState_set_T_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl arg2 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolPropDbl)_swig_go_1; 
  
  {
    try {
      (arg1)->set_T(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


_gostring_ _wrap_AbstractState_backend_name_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->backend_name();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


bool _wrap_AbstractState_using_mole_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->using_mole_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_AbstractState_using_mass_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->using_mass_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_AbstractState_using_volu_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->using_volu_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_set_reference_stateS_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->set_reference_stateS((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_reference_stateD_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      (arg1)->set_reference_stateD(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_mole_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->set_mole_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_mass_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->set_mass_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_volu_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->set_volu_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


std::vector< double > *_wrap_AbstractState_mole_fractions_liquid_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > result;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->mole_fractions_liquid_double();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< double > **)&_swig_go_result = new std::vector< double >(result); 
  return _swig_go_result;
}


std::vector< double > *_wrap_AbstractState_mole_fractions_vapor_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > result;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->mole_fractions_vapor_double();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< double > **)&_swig_go_result = new std::vector< double >(result); 
  return _swig_go_result;
}


std::vector< CoolPropDbl > *_wrap_AbstractState_get_mole_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< CoolPropDbl > *result = 0 ;
  std::vector< CoolPropDbl > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< CoolPropDbl > *) &(arg1)->get_mole_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< CoolPropDbl > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< CoolPropDbl > *_wrap_AbstractState_get_mass_fractions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  SwigValueWrapper< std::vector< CoolPropDbl > > result;
  std::vector< CoolPropDbl > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_mass_fractions();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< CoolPropDbl > **)&_swig_go_result = new std::vector< CoolPropDbl >(result); 
  return _swig_go_result;
}


void _wrap_AbstractState_update_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, double _swig_go_2, double _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::input_pairs)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  {
    try {
      (arg1)->update(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_update_with_guesses_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, double _swig_go_2, double _swig_go_3, CoolProp::GuessesStructure *_swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  CoolProp::GuessesStructure *arg5 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::input_pairs)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = *(CoolProp::GuessesStructure **)&_swig_go_4; 
  
  {
    try {
      (arg1)->update_with_guesses(arg2,arg3,arg4,(CoolProp::GuessesStructure const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


bool _wrap_AbstractState_available_in_high_level_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->available_in_high_level();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_AbstractState_fluid_param_string_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (arg1)->fluid_param_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_AbstractState_fluid_names_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->fluid_names();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


double _wrap_AbstractState_get_fluid_constant_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, intgo _swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  CoolProp::parameters arg3 ;
  std::size_t *argp2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  arg3 = (CoolProp::parameters)_swig_go_2; 
  
  {
    try {
      result = (double)((CoolProp::AbstractState const *)arg1)->get_fluid_constant(arg2,arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_set_binary_interaction_double__SWIG_0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      (arg1)->set_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_binary_interaction_double__SWIG_1_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, std::size_t *_swig_go_2, _gostring_ _swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::size_t const *argp2 ;
  std::size_t const *argp3 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg2 = (std::size_t)*argp2;
  
  
  argp3 = (std::size_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg3 = (std::size_t)*argp3;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      (arg1)->set_binary_interaction_double(arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_binary_interaction_string__SWIG_0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_binary_interaction_string__SWIG_1_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, std::size_t *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::size_t const *argp2 ;
  std::size_t const *argp3 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg2 = (std::size_t)*argp2;
  
  
  argp3 = (std::size_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg3 = (std::size_t)*argp3;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      (arg1)->set_binary_interaction_string(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_get_binary_interaction_double__SWIG_0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_get_binary_interaction_double__SWIG_1_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, std::size_t *_swig_go_2, _gostring_ _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  std::size_t const *argp2 ;
  std::size_t const *argp3 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg2 = (std::size_t)*argp2;
  
  
  argp3 = (std::size_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg3 = (std::size_t)*argp3;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_AbstractState_get_binary_interaction_string_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      result = (arg1)->get_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_AbstractState_apply_simple_mixing_rule_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, std::size_t *_swig_go_2, _gostring_ _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  std::size_t *argp2 ;
  std::size_t *argp3 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  argp3 = (std::size_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg3 = (std::size_t)*argp3;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->apply_simple_mixing_rule(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_cubic_alpha_C_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, long long _swig_go_1, _gostring_ _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  arg6 = (double)_swig_go_5; 
  
  {
    try {
      (arg1)->set_cubic_alpha_C(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_set_fluid_parameter_double_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, long long _swig_go_1, _gostring_ _swig_go_2, double _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (double)_swig_go_3; 
  
  {
    try {
      (arg1)->set_fluid_parameter_double(arg2,(std::string const &)*arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_get_fluid_parameter_double_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, long long _swig_go_1, _gostring_ _swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      result = (double)(arg1)->get_fluid_parameter_double(arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_AbstractState_clear_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->clear();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


CoolProp::SimpleState *_wrap_AbstractState_get_reducing_state_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::SimpleState *result = 0 ;
  CoolProp::SimpleState *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_reducing_state();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SimpleState **)&_swig_go_result = result; 
  return _swig_go_result;
}


CoolProp::SimpleState *_wrap_AbstractState_get_state_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  CoolProp::SimpleState *result = 0 ;
  CoolProp::SimpleState *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_state((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SimpleState **)&_swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Tmin_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Tmin();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Tmax_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Tmax();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_pmax_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->pmax();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Ttriple_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Ttriple();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_AbstractState_phase_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::phases result;
  intgo _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (CoolProp::phases)(arg1)->phase();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_AbstractState_specify_phase_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::phases arg2 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::phases)_swig_go_1; 
  
  {
    try {
      (arg1)->specify_phase(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_unspecify_phase_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      (arg1)->unspecify_phase();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_T_critical_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->T_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_p_critical_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->p_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomolar_critical_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomolar_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomass_critical_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomass_critical();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< CoolProp::CriticalState > *_wrap_AbstractState_all_critical_points_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  SwigValueWrapper< std::vector< CoolProp::CriticalState > > result;
  std::vector< CoolProp::CriticalState > *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->all_critical_points();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< CoolProp::CriticalState > **)&_swig_go_result = new std::vector< CoolProp::CriticalState >(result); 
  return _swig_go_result;
}


void _wrap_AbstractState_build_spinodal_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      (arg1)->build_spinodal();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


CoolProp::SpinodalData *_wrap_AbstractState_get_spinodal_data_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::SpinodalData result;
  CoolProp::SpinodalData *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->get_spinodal_data();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::SpinodalData **)&_swig_go_result = new CoolProp::SpinodalData(result); 
  return _swig_go_result;
}


void _wrap_AbstractState_criticality_contour_values_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double *_swig_go_1, double *_swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  
  {
    try {
      (arg1)->criticality_contour_values(*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_tangent_plane_distance__SWIG_0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double _swig_go_1, double _swig_go_2, std::vector< double > *_swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double > *arg4 = 0 ;
  double arg5 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(std::vector< double > **)&_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double > const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_tangent_plane_distance__SWIG_1_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double _swig_go_1, double _swig_go_2, std::vector< double > *_swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double > *arg4 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(std::vector< double > **)&_swig_go_3; 
  
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double > const &)*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_T_reducing_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->T_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomolar_reducing_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomolar_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomass_reducing_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomass_reducing();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_p_triple_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->p_triple();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_AbstractState_name_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->name();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_AbstractState_description_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->description();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


double _wrap_AbstractState_dipole_moment_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->dipole_moment();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_keyed_output_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  
  {
    try {
      result = (double)(arg1)->keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_trivial_keyed_output_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  
  {
    try {
      result = (double)(arg1)->trivial_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_saturated_liquid_keyed_output_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  
  {
    try {
      result = (double)(arg1)->saturated_liquid_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_saturated_vapor_keyed_output_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  
  {
    try {
      result = (double)(arg1)->saturated_vapor_keyed_output(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_T_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->T();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_rhomass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->rhomass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_p_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->p();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Q_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Q();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_tau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->tau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_delta_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->delta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_molar_mass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->molar_mass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_acentric_factor_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->acentric_factor();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_gas_constant_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->gas_constant();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Bvirial_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Bvirial();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dBvirial_dT_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->dBvirial_dT();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Cvirial_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Cvirial();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dCvirial_dT_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->dCvirial_dT();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_compressibility_factor_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->compressibility_factor();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_hmolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->hmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_hmass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->hmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_hmolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->hmolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_hmass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->hmass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_smolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->smolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_smass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->smass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_smolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->smolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_smass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->smass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_umolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->umolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_umass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->umass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_umolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->umolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_umass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->umass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cpmolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cpmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cpmass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cpmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cp0molar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cp0molar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cp0mass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cp0mass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cvmolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cvmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_cvmass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->cvmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_gibbsmolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->gibbsmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_gibbsmass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->gibbsmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_gibbsmolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->gibbsmolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_gibbsmass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->gibbsmass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_helmholtzmolar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->helmholtzmolar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_helmholtzmass_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->helmholtzmass();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_helmholtzmolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->helmholtzmolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_helmholtzmass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->helmholtzmass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_volumemolar_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->volumemolar_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_volumemass_excess_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->volumemass_excess();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_speed_sound_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->speed_sound();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_isothermal_compressibility_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->isothermal_compressibility();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_isobaric_expansion_coefficient_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->isobaric_expansion_coefficient();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_isentropic_expansion_coefficient_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->isentropic_expansion_coefficient();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_fugacity_coefficient_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  {
    try {
      result = (double)(arg1)->fugacity_coefficient(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_fugacity_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  {
    try {
      result = (double)(arg1)->fugacity(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_chemical_potential_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  {
    try {
      result = (double)(arg1)->chemical_potential(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_fundamental_derivative_of_gas_dynamics_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->fundamental_derivative_of_gas_dynamics();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_PIP_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->PIP();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_true_critical_point_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, double *_swig_go_1, double *_swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(double **)&_swig_go_1; 
  arg3 = *(double **)&_swig_go_2; 
  
  {
    try {
      (arg1)->true_critical_point(*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_ideal_curve_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, std::vector< double > *_swig_go_2, std::vector< double > *_swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< double > **)&_swig_go_2; 
  arg4 = *(std::vector< double > **)&_swig_go_3; 
  
  {
    try {
      (arg1)->ideal_curve((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_first_partial_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  
  {
    try {
      result = (arg1)->first_partial_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_second_partial_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  arg5 = (CoolProp::parameters)_swig_go_4; 
  arg6 = (CoolProp::parameters)_swig_go_5; 
  
  {
    try {
      result = (arg1)->second_partial_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_first_saturation_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  
  {
    try {
      result = (arg1)->first_saturation_deriv(arg2,arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_second_saturation_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  
  {
    try {
      result = (arg1)->second_saturation_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_first_two_phase_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_second_two_phase_deriv_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  arg5 = (CoolProp::parameters)_swig_go_4; 
  arg6 = (CoolProp::parameters)_swig_go_5; 
  
  {
    try {
      result = (double)(arg1)->second_two_phase_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_first_two_phase_deriv_splined_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (CoolProp::parameters)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv_splined(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_build_phase_envelope__SWIG_0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->build_phase_envelope((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_build_phase_envelope__SWIG_1_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      (arg1)->build_phase_envelope();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


CoolProp::PhaseEnvelopeData *_wrap_AbstractState_get_phase_envelope_data_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::PhaseEnvelopeData *result = 0 ;
  CoolProp::PhaseEnvelopeData *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *) &(arg1)->get_phase_envelope_data();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::PhaseEnvelopeData **)&_swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_AbstractState_has_melting_line_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (bool)(arg1)->has_melting_line();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_melting_line_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, double _swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  {
    try {
      result = (double)(arg1)->melting_line(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_saturation_ancillary_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, double _swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  int arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = (CoolProp::parameters)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (CoolProp::parameters)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      result = (double)(arg1)->saturation_ancillary(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_viscosity_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->viscosity();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_viscosity_contributions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, CoolPropDbl *_swig_go_1, CoolPropDbl *_swig_go_2, CoolPropDbl *_swig_go_3, CoolPropDbl *_swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(CoolPropDbl **)&_swig_go_1; 
  arg3 = *(CoolPropDbl **)&_swig_go_2; 
  arg4 = *(CoolPropDbl **)&_swig_go_3; 
  arg5 = *(CoolPropDbl **)&_swig_go_4; 
  
  {
    try {
      (arg1)->viscosity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_conductivity_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->conductivity();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_conductivity_contributions_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, CoolPropDbl *_swig_go_1, CoolPropDbl *_swig_go_2, CoolPropDbl *_swig_go_3, CoolPropDbl *_swig_go_4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  arg2 = *(CoolPropDbl **)&_swig_go_1; 
  arg3 = *(CoolPropDbl **)&_swig_go_2; 
  arg4 = *(CoolPropDbl **)&_swig_go_3; 
  arg5 = *(CoolPropDbl **)&_swig_go_4; 
  
  {
    try {
      (arg1)->conductivity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_surface_tension_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->surface_tension();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_Prandtl_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (double)(arg1)->Prandtl();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_AbstractState_conformal_state_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, _gostring_ _swig_go_1, CoolPropDbl *_swig_go_2, CoolPropDbl *_swig_go_3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(CoolPropDbl **)&_swig_go_2; 
  arg4 = *(CoolPropDbl **)&_swig_go_3; 
  
  {
    try {
      (arg1)->conformal_state((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_AbstractState_change_EOS_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0, std::size_t *_swig_go_1, _gostring_ _swig_go_2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::string *arg3 = 0 ;
  std::size_t const *argp2 ;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t const");
  }
  arg2 = (std::size_t)*argp2;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->change_EOS(arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_AbstractState_alpha0_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->alpha0();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dalpha0_dDelta_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dalpha0_dDelta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dalpha0_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dalpha0_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alpha0_dDelta2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alpha0_dDelta2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alpha0_dDelta_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alpha0_dDelta_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alpha0_dTau2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alpha0_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alpha0_dTau3_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alpha0_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alpha0_dDelta_dTau2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alpha0_dDelta_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alpha0_dDelta2_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alpha0_dDelta2_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alpha0_dDelta3_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alpha0_dDelta3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_alphar_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->alphar();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dalphar_dDelta_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dalphar_dDelta();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_dalphar_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->dalphar_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alphar_dDelta2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alphar_dDelta2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alphar_dDelta_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alphar_dDelta_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d2alphar_dTau2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d2alphar_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alphar_dDelta3_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alphar_dDelta3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alphar_dDelta2_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alphar_dDelta2_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alphar_dDelta_dTau2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alphar_dDelta_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d3alphar_dTau3_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d3alphar_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d4alphar_dDelta4_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d4alphar_dDelta4();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d4alphar_dDelta3_dTau_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d4alphar_dDelta3_dTau();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d4alphar_dDelta2_dTau2_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d4alphar_dDelta2_dTau2();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d4alphar_dDelta_dTau3_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d4alphar_dDelta_dTau3();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_AbstractState_d4alphar_dTau4_CoolProp_ef03193b832d75f0(CoolProp::AbstractState *_swig_go_0) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  double _swig_go_result;
  
  arg1 = *(CoolProp::AbstractState **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->d4alphar_dTau4();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


CoolProp::AbstractState *_wrap_AbstractStateGenerator_get_AbstractState_CoolProp_ef03193b832d75f0(CoolProp::AbstractStateGenerator *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  CoolProp::AbstractStateGenerator *arg1 = (CoolProp::AbstractStateGenerator *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  CoolProp::AbstractState *_swig_go_result;
  
  arg1 = *(CoolProp::AbstractStateGenerator **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      result = (CoolProp::AbstractState *)(arg1)->get_AbstractState((std::vector< std::string > const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::AbstractState **)&_swig_go_result = (CoolProp::AbstractState *)result; 
  return _swig_go_result;
}


void _wrap_delete_AbstractStateGenerator_CoolProp_ef03193b832d75f0(CoolProp::AbstractStateGenerator *_swig_go_0) {
  CoolProp::AbstractStateGenerator *arg1 = (CoolProp::AbstractStateGenerator *) 0 ;
  
  arg1 = *(CoolProp::AbstractStateGenerator **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_register_backend_CoolProp_ef03193b832d75f0(CoolProp::backend_families *_swig_go_0, shared_ptr< CoolProp::AbstractStateGenerator > *_swig_go_1) {
  CoolProp::backend_families *arg1 = 0 ;
  SwigValueWrapper< shared_ptr< CoolProp::AbstractStateGenerator > > arg2 ;
  shared_ptr< CoolProp::AbstractStateGenerator > *argp2 ;
  
  arg1 = *(CoolProp::backend_families **)&_swig_go_0; 
  
  argp2 = (shared_ptr< CoolProp::AbstractStateGenerator > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null shared_ptr< CoolProp::AbstractStateGenerator >");
  }
  arg2 = (shared_ptr< CoolProp::AbstractStateGenerator >)*argp2;
  
  
  {
    try {
      CoolProp::register_backend((enum CoolProp::backend_families const &)*arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_Props1SI_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string arg1 ;
  std::string arg2 ;
  double result;
  double _swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (double)CoolProp::Props1SI(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_PropsSI_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3, double _swig_go_4, _gostring_ _swig_go_5) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double result;
  double _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      result = (double)CoolProp::PropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::vector< double > > *_wrap_PropsSImulti_CoolProp_ef03193b832d75f0(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1, std::vector< double > *_swig_go_2, _gostring_ _swig_go_3, std::vector< double > *_swig_go_4, _gostring_ _swig_go_5, std::vector< std::string > *_swig_go_6, std::vector< double > *_swig_go_7) {
  std::vector< std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::vector< std::string > *arg7 = 0 ;
  std::vector< double > *arg8 = 0 ;
  std::vector< std::vector< double > > result;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::vector< double > **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = *(std::vector< double > **)&_swig_go_4; 
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  arg7 = *(std::vector< std::string > **)&_swig_go_6; 
  arg8 = *(std::vector< double > **)&_swig_go_7; 
  
  {
    try {
      result = CoolProp::PropsSImulti((std::vector< std::string > const &)*arg1,(std::string const &)*arg2,(std::vector< double > const &)*arg3,(std::string const &)*arg4,(std::vector< double > const &)*arg5,(std::string const &)*arg6,(std::vector< std::string > const &)*arg7,(std::vector< double > const &)*arg8);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::vector< std::vector< double > > **)&_swig_go_result = new std::vector< std::vector< double > >(result); 
  return _swig_go_result;
}


intgo _wrap_get_debug_level_CoolProp_ef03193b832d75f0() {
  int result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = (int)CoolProp::get_debug_level();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_set_debug_level_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      CoolProp::set_debug_level(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_error_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      CoolProp::set_error_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_warning_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      CoolProp::set_warning_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_saturation_ancillary_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, double _swig_go_4) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double result;
  double _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      result = (double)CoolProp::saturation_ancillary((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_get_global_param_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = CoolProp::get_global_param_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_get_fluid_param_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = CoolProp::get_fluid_param_string((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


bool _wrap_is_valid_fluid_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (bool)CoolProp::is_valid_fluid_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_add_fluids_as_JSON_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)CoolProp::add_fluids_as_JSON((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_set_reference_stateS_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      CoolProp::set_reference_stateS((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_reference_stateD_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4) {
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  arg5 = (double)_swig_go_4; 
  
  {
    try {
      CoolProp::set_reference_stateD((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


_gostring_ _wrap_PhaseSI_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, double _swig_go_1, _gostring_ _swig_go_2, double _swig_go_3, _gostring_ _swig_go_4) {
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (double)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  arg4 = (double)_swig_go_3; 
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  {
    try {
      result = CoolProp::PhaseSI((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_extract_backend_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2) {
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  {
    try {
      CoolProp::extract_backend(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


_gostring_ _wrap_extract_fractions_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, std::vector< double > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  {
    try {
      result = CoolProp::extract_fractions((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_phase_lookup_string_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  CoolProp::phases arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (CoolProp::phases)_swig_go_0; 
  
  {
    try {
      result = CoolProp::phase_lookup_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_TypeI_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, bool _swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->TypeI = arg2;
  
}


bool _wrap_PhaseEnvelopeData_TypeI_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (bool) ((arg1)->TypeI);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_built_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, bool _swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->built = arg2;
  
}


bool _wrap_PhaseEnvelopeData_built_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (bool) ((arg1)->built);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_iTsat_max_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  if (arg1) (arg1)->iTsat_max = arg2;
  
}


std::size_t *_wrap_PhaseEnvelopeData_iTsat_max_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  std::size_t *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result =  ((arg1)->iTsat_max);
  *(std::size_t **)&_swig_go_result = new std::size_t(result); 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_ipsat_max_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  if (arg1) (arg1)->ipsat_max = arg2;
  
}


std::size_t *_wrap_PhaseEnvelopeData_ipsat_max_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  std::size_t *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result =  ((arg1)->ipsat_max);
  *(std::size_t **)&_swig_go_result = new std::size_t(result); 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_icrit_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  if (arg1) (arg1)->icrit = arg2;
  
}


std::size_t *_wrap_PhaseEnvelopeData_icrit_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  std::size_t *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result =  ((arg1)->icrit);
  *(std::size_t **)&_swig_go_result = new std::size_t(result); 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_T_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->T = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_T_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->T);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_p_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->p = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_p_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->p);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_lnT_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->lnT = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_lnT_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->lnT);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_lnp_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->lnp = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_lnp_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->lnp);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_rhomolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_rhomolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->rhomolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_rhomolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->rhomolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_rhomolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->rhomolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_lnrhomolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->lnrhomolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_lnrhomolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->lnrhomolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_lnrhomolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->lnrhomolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_lnrhomolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->lnrhomolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_hmolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->hmolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_hmolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->hmolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_hmolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->hmolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_hmolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->hmolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_smolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->smolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_smolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->smolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_smolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->smolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_smolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->smolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_Q_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->Q = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_Q_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->Q);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_cpmolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->cpmolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_cpmolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->cpmolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_cpmolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->cpmolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_cpmolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->cpmolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_cvmolar_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->cvmolar_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_cvmolar_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->cvmolar_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_cvmolar_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->cvmolar_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_cvmolar_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->cvmolar_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_viscosity_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->viscosity_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_viscosity_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->viscosity_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_viscosity_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->viscosity_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_viscosity_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->viscosity_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_conductivity_liq_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->conductivity_liq = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_conductivity_liq_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->conductivity_liq);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_conductivity_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->conductivity_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_conductivity_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->conductivity_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_speed_sound_vap_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< double > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< double > **)&_swig_go_1; 
  
  if (arg1) (arg1)->speed_sound_vap = *arg2;
  
}


std::vector< double > *_wrap_PhaseEnvelopeData_speed_sound_vap_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  std::vector< double > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< double > *)& ((arg1)->speed_sound_vap);
  *(std::vector< double > **)&_swig_go_result = (std::vector< double > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_K_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->K = *arg2;
  
}


std::vector< std::vector< double > > *_wrap_PhaseEnvelopeData_K_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->K);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_lnK_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->lnK = *arg2;
  
}


std::vector< std::vector< double > > *_wrap_PhaseEnvelopeData_lnK_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->lnK);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_x_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->x = *arg2;
  
}


std::vector< std::vector< double > > *_wrap_PhaseEnvelopeData_x_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->x);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_y_set_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::vector< std::vector< double > > *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< double > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->y = *arg2;
  
}


std::vector< std::vector< double > > *_wrap_PhaseEnvelopeData_y_get_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  std::vector< std::vector< double > > *_swig_go_result;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  result = (std::vector< std::vector< double > > *)& ((arg1)->y);
  *(std::vector< std::vector< double > > **)&_swig_go_result = (std::vector< std::vector< double > > *)result; 
  return _swig_go_result;
}


CoolProp::PhaseEnvelopeData *_wrap_new_PhaseEnvelopeData_CoolProp_ef03193b832d75f0() {
  CoolProp::PhaseEnvelopeData *result = 0 ;
  CoolProp::PhaseEnvelopeData *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *)new CoolProp::PhaseEnvelopeData();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::PhaseEnvelopeData **)&_swig_go_result = (CoolProp::PhaseEnvelopeData *)result; 
  return _swig_go_result;
}


void _wrap_PhaseEnvelopeData_resize_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, std::size_t *_swig_go_1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  argp2 = (std::size_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg2 = (std::size_t)*argp2;
  
  
  {
    try {
      (arg1)->resize(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_PhaseEnvelopeData_clear_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_PhaseEnvelopeData_insert_variables_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5, double _swig_go_6, double _swig_go_7, double _swig_go_8, std::vector< CoolPropDbl > *_swig_go_9, std::vector< CoolPropDbl > *_swig_go_10, std::size_t *_swig_go_11) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl > *arg10 = 0 ;
  std::vector< CoolPropDbl > *arg11 = 0 ;
  std::size_t arg12 ;
  std::size_t *argp12 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = (CoolPropDbl)_swig_go_1; 
  arg3 = (CoolPropDbl)_swig_go_2; 
  arg4 = (CoolPropDbl)_swig_go_3; 
  arg5 = (CoolPropDbl)_swig_go_4; 
  arg6 = (CoolPropDbl)_swig_go_5; 
  arg7 = (CoolPropDbl)_swig_go_6; 
  arg8 = (CoolPropDbl)_swig_go_7; 
  arg9 = (CoolPropDbl)_swig_go_8; 
  arg10 = *(std::vector< CoolPropDbl > **)&_swig_go_9; 
  arg11 = *(std::vector< CoolPropDbl > **)&_swig_go_10; 
  
  argp12 = (std::size_t *)_swig_go_11;
  if (argp12 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg12 = (std::size_t)*argp12;
  
  
  {
    try {
      (arg1)->insert_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl > const &)*arg10,(std::vector< CoolPropDbl > const &)*arg11,arg12);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_PhaseEnvelopeData_store_variables_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, double _swig_go_4, double _swig_go_5, double _swig_go_6, double _swig_go_7, double _swig_go_8, std::vector< CoolPropDbl > *_swig_go_9, std::vector< CoolPropDbl > *_swig_go_10) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl > *arg10 = 0 ;
  std::vector< CoolPropDbl > *arg11 = 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  arg2 = (CoolPropDbl)_swig_go_1; 
  arg3 = (CoolPropDbl)_swig_go_2; 
  arg4 = (CoolPropDbl)_swig_go_3; 
  arg5 = (CoolPropDbl)_swig_go_4; 
  arg6 = (CoolPropDbl)_swig_go_5; 
  arg7 = (CoolPropDbl)_swig_go_6; 
  arg8 = (CoolPropDbl)_swig_go_7; 
  arg9 = (CoolPropDbl)_swig_go_8; 
  arg10 = *(std::vector< CoolPropDbl > **)&_swig_go_9; 
  arg11 = *(std::vector< CoolPropDbl > **)&_swig_go_10; 
  
  {
    try {
      (arg1)->store_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl > const &)*arg10,(std::vector< CoolPropDbl > const &)*arg11);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_delete_PhaseEnvelopeData_CoolProp_ef03193b832d75f0(CoolProp::PhaseEnvelopeData *_swig_go_0) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  
  arg1 = *(CoolProp::PhaseEnvelopeData **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


intgo _wrap_NORMALIZE_GAS_CONSTANTS_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = NORMALIZE_GAS_CONSTANTS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CRITICAL_WITHIN_1UK_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CRITICAL_WITHIN_1UK;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CRITICAL_SPLINES_ENABLED_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CRITICAL_SPLINES_ENABLED;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SAVE_RAW_TABLES_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = SAVE_RAW_TABLES;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ALTERNATIVE_TABLES_DIRECTORY_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ALTERNATIVE_TABLES_DIRECTORY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ALTERNATIVE_REFPROP_PATH_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ALTERNATIVE_REFPROP_PATH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ALTERNATIVE_REFPROP_HMX_BNC_PATH_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ALTERNATIVE_REFPROP_HMX_BNC_PATH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ALTERNATIVE_REFPROP_LIBRARY_PATH_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ALTERNATIVE_REFPROP_LIBRARY_PATH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = REFPROP_DONT_ESTIMATE_INTERACTION_PARAMETERS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = REFPROP_IGNORE_ERROR_ESTIMATED_INTERACTION_PARAMETERS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_USE_GERG_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = REFPROP_USE_GERG;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_REFPROP_USE_PENGROBINSON_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = REFPROP_USE_PENGROBINSON;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = MAXIMUM_TABLE_DIRECTORY_SIZE_IN_GB;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DONT_CHECK_PROPERTY_LIMITS_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = DONT_CHECK_PROPERTY_LIMITS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HENRYS_LAW_TO_GENERATE_VLE_GUESSES_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = HENRYS_LAW_TO_GENERATE_VLE_GUESSES;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_PHASE_ENVELOPE_STARTING_PRESSURE_PA_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = PHASE_ENVELOPE_STARTING_PRESSURE_PA;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_R_U_CODATA_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = R_U_CODATA;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_VTPR_UNIFAC_PATH_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = VTPR_UNIFAC_PATH;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_SPINODAL_MINIMUM_DELTA_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = SPINODAL_MINIMUM_DELTA;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OVERWRITE_FLUIDS_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = OVERWRITE_FLUIDS;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OVERWRITE_DEPARTURE_FUNCTION_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = OVERWRITE_DEPARTURE_FUNCTION;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OVERWRITE_BINARY_INTERACTION_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = OVERWRITE_BINARY_INTERACTION;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_USE_GUESSES_IN_PROPSSI_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = USE_GUESSES_IN_PROPSSI;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ASSUME_CRITICAL_POINT_STABLE_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ASSUME_CRITICAL_POINT_STABLE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_VTPR_ALWAYS_RELOAD_LIBRARY_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = VTPR_ALWAYS_RELOAD_LIBRARY;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_FLOAT_PUNCTUATION_CoolProp_ef03193b832d75f0() {
  configuration_keys result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = FLOAT_PUNCTUATION;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_NOT_DEFINED_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_NOT_DEFINED_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_BOOL_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_BOOL_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_DOUBLE_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_DOUBLE_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_INTEGER_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_INTEGER_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_STRING_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_STRING_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CONFIGURATION_ENDOFLIST_TYPE_CoolProp_ef03193b832d75f0() {
  ConfigurationDataTypes result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = CONFIGURATION_ENDOFLIST_TYPE;
      
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_config_key_to_string_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  configuration_keys arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  {
    try {
      result = CoolProp::config_key_to_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_config_string_to_key_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  configuration_keys result;
  intgo _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = (configuration_keys)CoolProp::config_string_to_key((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_config_key_description__SWIG_0_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  configuration_keys arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  {
    try {
      result = CoolProp::config_key_description(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_config_key_description__SWIG_1_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      result = CoolProp::config_key_description((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


CoolProp::ConfigurationItem *_wrap_new_ConfigurationItem__SWIG_0_CoolProp_ef03193b832d75f0(intgo _swig_go_0, bool _swig_go_1) {
  configuration_keys arg1 ;
  bool arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = (CoolProp::ConfigurationItem *)result; 
  return _swig_go_result;
}


CoolProp::ConfigurationItem *_wrap_new_ConfigurationItem__SWIG_1_CoolProp_ef03193b832d75f0(intgo _swig_go_0, intgo _swig_go_1) {
  configuration_keys arg1 ;
  int arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = (CoolProp::ConfigurationItem *)result; 
  return _swig_go_result;
}


CoolProp::ConfigurationItem *_wrap_new_ConfigurationItem__SWIG_2_CoolProp_ef03193b832d75f0(intgo _swig_go_0, double _swig_go_1) {
  configuration_keys arg1 ;
  double arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = (CoolProp::ConfigurationItem *)result; 
  return _swig_go_result;
}


CoolProp::ConfigurationItem *_wrap_new_ConfigurationItem__SWIG_3_CoolProp_ef03193b832d75f0(intgo _swig_go_0, _gostring_ _swig_go_1) {
  configuration_keys arg1 ;
  char *arg2 = (char *) 0 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,(char const *)arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = (CoolProp::ConfigurationItem *)result; 
  free(arg2); 
  return _swig_go_result;
}


CoolProp::ConfigurationItem *_wrap_new_ConfigurationItem__SWIG_4_CoolProp_ef03193b832d75f0(intgo _swig_go_0, _gostring_ _swig_go_1) {
  configuration_keys arg1 ;
  std::string *arg2 = 0 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = (CoolProp::ConfigurationItem *)result; 
  return _swig_go_result;
}


void _wrap_ConfigurationItem_set_bool_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0, bool _swig_go_1) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      (arg1)->set_bool(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_ConfigurationItem_set_integer_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0, intgo _swig_go_1) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  int arg2 ;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      (arg1)->set_integer(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_ConfigurationItem_set_double_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0, double _swig_go_1) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  double arg2 ;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    try {
      (arg1)->set_double(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_ConfigurationItem_set_string_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0, _gostring_ _swig_go_1) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->set_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


intgo _wrap_ConfigurationItem_get_key_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  configuration_keys result;
  intgo _swig_go_result;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  
  {
    try {
      result = (configuration_keys)((CoolProp::ConfigurationItem const *)arg1)->get_key();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_delete_ConfigurationItem_CoolProp_ef03193b832d75f0(CoolProp::ConfigurationItem *_swig_go_0) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  
  arg1 = *(CoolProp::ConfigurationItem **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


CoolProp::Configuration *_wrap_new_Configuration_CoolProp_ef03193b832d75f0() {
  CoolProp::Configuration *result = 0 ;
  CoolProp::Configuration *_swig_go_result;
  
  
  {
    try {
      result = (CoolProp::Configuration *)new CoolProp::Configuration();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::Configuration **)&_swig_go_result = (CoolProp::Configuration *)result; 
  return _swig_go_result;
}


void _wrap_delete_Configuration_CoolProp_ef03193b832d75f0(CoolProp::Configuration *_swig_go_0) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  
  arg1 = *(CoolProp::Configuration **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


CoolProp::ConfigurationItem *_wrap_Configuration_get_item_CoolProp_ef03193b832d75f0(CoolProp::Configuration *_swig_go_0, intgo _swig_go_1) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  configuration_keys arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  CoolProp::ConfigurationItem *_swig_go_result;
  
  arg1 = *(CoolProp::Configuration **)&_swig_go_0; 
  arg2 = (configuration_keys)_swig_go_1; 
  
  {
    try {
      result = (CoolProp::ConfigurationItem *) &(arg1)->get_item(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(CoolProp::ConfigurationItem **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Configuration_add_item_CoolProp_ef03193b832d75f0(CoolProp::Configuration *_swig_go_0, CoolProp::ConfigurationItem *_swig_go_1) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  SwigValueWrapper< CoolProp::ConfigurationItem > arg2 ;
  CoolProp::ConfigurationItem *argp2 ;
  
  arg1 = *(CoolProp::Configuration **)&_swig_go_0; 
  
  argp2 = (CoolProp::ConfigurationItem *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null CoolProp::ConfigurationItem");
  }
  arg2 = (CoolProp::ConfigurationItem)*argp2;
  
  
  {
    try {
      (arg1)->add_item(arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


std::map< enum configuration_keys,CoolProp::ConfigurationItem > *_wrap_Configuration_get_items_CoolProp_ef03193b832d75f0(CoolProp::Configuration *_swig_go_0) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  std::map< configuration_keys,CoolProp::ConfigurationItem > *result = 0 ;
  std::map< enum configuration_keys,CoolProp::ConfigurationItem > *_swig_go_result;
  
  arg1 = *(CoolProp::Configuration **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< configuration_keys,CoolProp::ConfigurationItem > *) &(arg1)->get_items();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  *(std::map< configuration_keys,CoolProp::ConfigurationItem > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Configuration_set_defaults_CoolProp_ef03193b832d75f0(CoolProp::Configuration *_swig_go_0) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  
  arg1 = *(CoolProp::Configuration **)&_swig_go_0; 
  
  {
    try {
      (arg1)->set_defaults();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


bool _wrap_get_config_bool_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  configuration_keys arg1 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  {
    try {
      result = (bool)CoolProp::get_config_bool(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_get_config_double_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  configuration_keys arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  {
    try {
      result = (double)CoolProp::get_config_double(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_get_config_string_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  configuration_keys arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  {
    try {
      result = CoolProp::get_config_string(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_get_config_as_json_string_CoolProp_ef03193b832d75f0() {
  std::string result;
  _gostring_ _swig_go_result;
  
  
  {
    try {
      result = CoolProp::get_config_as_json_string();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_set_config_bool_CoolProp_ef03193b832d75f0(intgo _swig_go_0, bool _swig_go_1) {
  configuration_keys arg1 ;
  bool arg2 ;
  
  arg1 = (configuration_keys)_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  {
    try {
      CoolProp::set_config_bool(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_config_double_CoolProp_ef03193b832d75f0(intgo _swig_go_0, double _swig_go_1) {
  configuration_keys arg1 ;
  double arg2 ;
  
  arg1 = (configuration_keys)_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  {
    try {
      CoolProp::set_config_double(arg1,arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_config_string_CoolProp_ef03193b832d75f0(intgo _swig_go_0, _gostring_ _swig_go_1) {
  configuration_keys arg1 ;
  std::string *arg2 = 0 ;
  
  arg1 = (configuration_keys)_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      CoolProp::set_config_string(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_set_config_as_json_string_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  {
    try {
      CoolProp::set_config_as_json_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


double _wrap_HAPropsSI_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3, double _swig_go_4, _gostring_ _swig_go_5, double _swig_go_6) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  double result;
  double _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  arg7 = (double)_swig_go_6; 
  
  {
    try {
      result = (double)HumidAir::HAPropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_HAProps_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, _gostring_ _swig_go_1, double _swig_go_2, _gostring_ _swig_go_3, double _swig_go_4, _gostring_ _swig_go_5, double _swig_go_6) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  double result;
  double _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (double)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (double)_swig_go_4; 
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  arg7 = (double)_swig_go_6; 
  
  {
    try {
      result = (double)HumidAir::HAProps((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_HAProps_Aux_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, double _swig_go_1, double _swig_go_2, double _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double result;
  double _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = (double)_swig_go_3; 
  
  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';
  
  
  {
    try {
      result = (double)HumidAir::HAProps_Aux((char const *)arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  free(arg1); 
  free(arg5); 
  return _swig_go_result;
}


double _wrap_IceProps_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0, double _swig_go_1, double _swig_go_2) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  double _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  arg2 = (double)_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  {
    try {
      result = (double)HumidAir::IceProps((char const *)arg1,arg2,arg3);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


void _wrap_UseVirialCorrelations_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      HumidAir::UseVirialCorrelations(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_UseIsothermCompressCorrelation_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      HumidAir::UseIsothermCompressCorrelation(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_UseIdealGasEnthalpyCorrelations_CoolProp_ef03193b832d75f0(intgo _swig_go_0) {
  int arg1 ;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      HumidAir::UseIdealGasEnthalpyCorrelations(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


void _wrap_HAHelp_CoolProp_ef03193b832d75f0() {
  {
    try {
      HumidAir::HAHelp();
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  
}


intgo _wrap_returnHumAirCode_CoolProp_ef03193b832d75f0(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  {
    try {
      result = (int)HumidAir::returnHumAirCode((char const *)arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  free(arg1); 
  return _swig_go_result;
}


double _wrap_cair_sat_CoolProp_ef03193b832d75f0(double _swig_go_0) {
  double arg1 ;
  double result;
  double _swig_go_result;
  
  arg1 = (double)_swig_go_0; 
  
  {
    try {
      result = (double)HumidAir::cair_sat(arg1);
    }  catch (std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    } catch (...) {
      SWIG_exception(SWIG_RuntimeError, "unknown exception");
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

